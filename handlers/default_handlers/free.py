from loader import bot
from utils.logger import logger
from states.overall import OverallState
from keyboards.reply.create_markup import create_markup
from keyboards.reply.calendar import show_calendar
from telebot.types import InputMediaPhoto
from pg_maker import get_active_sublets
from telebot import types


months_dict = {
    "–Ø–Ω–≤–∞—Ä—å": "01",
    "–§–µ–≤—Ä–∞–ª—å": "02",
    "–ú–∞—Ä—Ç": "03",
    "–ê–ø—Ä–µ–ª—å": "04",
    "–ú–∞–π": "05",
    "–ò—é–Ω—å": "06",
    "–ò—é–ª—å": "07",
    "–ê–≤–≥—É—Å—Ç": "08",
    "–°–µ–Ω—Ç—è–±—Ä—å": "09",
    "–û–∫—Ç—è–±—Ä—å": "10",
    "–ù–æ—è–±—Ä—å": "11",
    "–î–µ–∫–∞–±—Ä—å": "12"
}


@bot.message_handler(commands=['free'])
def free(message):
    bot.set_state(message.from_user.id, state=OverallState.free_dates)
    with bot.retrieve_data(message.from_user.id) as data:
        data['command'] = 'free'
        data['offset'] = 0
        data['limit'] = 5
    logger.warning(f'{message.from_user.username} ‚Äî –∫–æ–º–∞–Ω–¥–∞ FREE')
    buttons = [('üìÖ–í –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—ÉüìÖ', '–î–∞—Ç–∞'),
               ('üèôÔ∏è–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µüèôÔ∏è', '–í –≥–æ—Ä–æ–¥–µ'),
               ('üîé –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ üîé', '–ú–µ—Å—è—Ü'),
               ('üáÆüá± –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–±–ª–µ—Ç—ã –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö üáÆüá±', '–í—Å–µ —Å—Ä–∞–∑—É'),
               ('‚¨á‚¨á‚¨á –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨á‚¨á‚¨á', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')]
    markup = create_markup(buttons)
    try:
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç",
                              message.message.chat.id, message.message.message_id, reply_markup=markup)
    except:
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=markup)


@bot.message_handler(states=OverallState.free_show)
def show_variants(message):
    with bot.retrieve_data(message.from_user.id) as data:
        city = data['city']

        if data['by_what'] == '–î–∞—Ç–∞':
            date = data['date_in']
            result = get_active_sublets(flag='by_date', city=city, date=date)

        elif data['by_what'] == '–ú–µ—Å—è—Ü':
            result = get_active_sublets(flag='by_month', city=city, year=data['year'], month=data['month'])

        elif data['by_what'] == '–í –≥–æ—Ä–æ–¥–µ':
            result = get_active_sublets(flag='by_active', city=city)

    send_sublets(result, message)


def send_sublets(result, message):
    if result:
        try:
            bot.delete_message(message.message.chat.id, message.message.message_id)
        except:
            pass

        for user_info, user_photos in result:
            media = []
            if user_photos:
                media.append(InputMediaPhoto(open(user_photos[0], 'rb').read(), caption=user_info))
                for photo_path in user_photos[1:]:
                    with open(photo_path, 'rb') as photo_file:
                        media.append(InputMediaPhoto(photo_file.read()))
            else:
                bot.send_message(message.from_user.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            try:
                bot.delete_message(message.message.chat.id, message.message.message_id)
            except:
                pass
            bot.send_media_group(message.from_user.id, media)

        with bot.retrieve_data(message.from_user.id) as data:
            city = data.get('city', 'No city')

        if len(result) >= 5:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"load_more_{city}"))
            bot.send_message(message.from_user.id, "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ?", reply_markup=markup)

    else:
        buttons = [('‚¨á‚¨á‚¨á –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨á‚¨á‚¨á', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')]
        markup = create_markup(buttons)
        try:
            bot.edit_message_text('–í —ç—Ç—É –¥–∞—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ',
                                  message.message.chat.id, message.message.message_id, reply_markup=markup)
        except:
            bot.send_message(message.from_user.id, '–í —ç—Ç—É –¥–∞—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ', reply_markup=markup)
        bot.delete_state(message.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data in ['–ú–µ—Å—è—Ü', '–î–∞—Ç–∞', '–í –≥–æ—Ä–æ–¥–µ', '–í—Å–µ —Å—Ä–∞–∑—É'])
def callback_query_free(call):
    with bot.retrieve_data(call.from_user.id) as data:
        data['by_what'] = ''

    if call.data == '–î–∞—Ç–∞':
        data['by_what'] = '–î–∞—Ç–∞'
        try:
            chat_id = call.message.chat.id
            message_id = call.message.message_id
            show_calendar(bot, call.message.chat.id, chat_id, message_id)
        except:
            show_calendar(bot, call.from_user.id)

    elif call.data == '–ú–µ—Å—è—Ü':
        data['by_what'] = '–ú–µ—Å—è—Ü'
        markup = types.InlineKeyboardMarkup()
        months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                  "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
        for month in months:
            markup.add(types.InlineKeyboardButton(month, callback_data=f"month_{month}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", chat_id=call.message.chat.id,
                              message_id=call.message.message_id, reply_markup=markup)

    elif call.data =='–í –≥–æ—Ä–æ–¥–µ':
        data['by_what'] = '–í –≥–æ—Ä–æ–¥–µ'
        buttons = [('–¢–µ–ª—å-–ê–≤–∏–≤ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏', '–¢–µ–ª—å-–ê–≤–∏–≤',),
                   ('–•–∞–π—Ñ–∞', '–•–∞–π—Ñ–∞')]
        markup = create_markup(buttons)
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: ", chat_id=call.message.chat.id,
                              message_id=call.message.message_id, reply_markup=markup)

    elif call.data == '–í—Å–µ —Å—Ä–∞–∑—É':
        result = get_active_sublets(flag='all_posts')
        data['all'] = True
        if result:
            send_sublets(result, call)


@bot.callback_query_handler(func=lambda call: call.data.startswith("month_") or call.data.startswith("year_"))
def callback_query_month(call):
    month = call.data.split("_")[1] if call.data.startswith("month_") else None
    year = call.data.split("_")[1] if call.data.startswith("year_") else None

    if month:
        with bot.retrieve_data(call.from_user.id) as data:
            data['month'] = int(months_dict[month])
        markup = types.InlineKeyboardMarkup()
        years = [str(year) for year in range(2024, 2027)]
        for year in years:
            markup.add(types.InlineKeyboardButton(year, callback_data=f"year_{year}"))
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", chat_id=call.message.chat.id,
                              message_id=call.message.message_id, reply_markup=markup)
    elif year:
        with bot.retrieve_data(call.from_user.id) as data:
            data['year'] = year
            buttons = [('–¢–µ–ª—å-–ê–≤–∏–≤ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏', '–¢–µ–ª—å-–ê–≤–∏–≤',),
                       ('–•–∞–π—Ñ–∞', '–•–∞–π—Ñ–∞')]
            markup = create_markup(buttons)
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: ", chat_id=call.message.chat.id,
                              message_id=call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("load_more_"))
def load_more_sublets(call):
    city = call.data.split('_')[2]
    with bot.retrieve_data(call.from_user.id) as data:
        data['offset'] += 5

    if city != 'No city':
        result = get_active_sublets(flag='by_active', city=city, offset=data['offset'])
    else:
        result = get_active_sublets(flag='all_posts', offset=data['offset'])

    if result:
        send_sublets(result, call)
    else:
        buttons = [('‚¨á‚¨á‚¨á –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨á‚¨á‚¨á', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')]
        markup = create_markup(buttons)
        try:
            bot.edit_message_text('–ë–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç ',
                                  call.message.chat.id, call.message.message_id, reply_markup=markup)
        except:
            bot.send_message(call.from_user.id, '–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ', reply_markup=markup)
